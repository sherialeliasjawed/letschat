{"version":3,"sources":["methods.js","components/Dialog.js","components/RoomList.js","components/ChatSession.js","components/MessageForm.js","components/RoomUsers.js","components/CreateRoom.js","App.js","index.js"],"names":["sendDM","id","_this","this","_this$state2","state","currentUser","rooms","roomName","concat","isPrivateChatCreated","filter","room","customData","isDirectMessage","arr","userIds","sort","join","length","Promise","resolve","createRoom","name","private","addUserIds","call","then","connectToRoom","_this2","arguments","undefined","setState","messages","subscribeToRoom","roomId","messageLimit","hooks","onMessage","message","Object","toConsumableArray","onPresenceChanged","currentRoom","roomUsers","users","a","presence","catch","console","error","Dialog","props","userId","handleInput","connectToChatkit","react_default","createElement","className","onSubmit","htmlFor","autoFocus","type","value","onChange","placeholder","disabled","RoomList","roomList","map","roomIcon","isPrivate","src","alt","class","isRoomActive","key","onClick","ChatSession","time","format","Date","updatedAt","senderId","text","MessageForm","newMessage","sendMessage","RoomUsers","user","title","CreateRoom","newRoom","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","showLogin","isLoading","event","_event$target","target","defineProperty","bind","assertThisInitialized","_this3","preventDefault","trim","axios","post","tokenProvider","Chatkit","TokenProvider","url","ChatManager","instanceLocator","connect","onAddedToRoom","alert","_this$state3","_this$state","err","log","components_RoomUsers","components_Dialog","style","color","components_ChatSession","components_MessageForm","components_CreateRoom","components_RoomList","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.975336a1.chunk.js","sourcesContent":["import Chatkit from '@pusher/chatkit-client';\nimport axios from 'axios';\n\nfunction handleInput(event) {\n  const { value, name } = event.target;\n\n  this.setState({\n    [name]: value\n  });\n}\n\nfunction createRoom(event) {\n  event.preventDefault();\n  const { currentUser, newRoom } = this.state;\n  if (newRoom.length > 0 && newRoom.trim() !== '') {\n    currentUser\n      .createRoom({\n        name: newRoom,\n        private: false,\n        customData: {\n          isDirectMessage: false,\n          userIds: [currentUser.id]\n        }\n      })\n      .catch(err => {\n        console.log(`Error creating room ${err}`);\n      });\n\n    this.setState({\n      newRoom: ''\n    });\n  }\n}\n\nfunction createPrivateRoom(id) {\n  const { currentUser, rooms } = this.state;\n  const roomName = `${currentUser.id}_${id}`;\n\n  const isPrivateChatCreated = rooms.filter(room => {\n    if (room.customData && room.customData.isDirectMessage) {\n      const arr = [currentUser.id, id];\n      const { userIds } = room.customData;\n\n      if (arr.sort().join('') === userIds.sort().join('')) {\n        return {\n          room\n        };\n      }\n    }\n\n    return false;\n  });\n\n  if (isPrivateChatCreated.length > 0) {\n    return Promise.resolve(isPrivateChatCreated[0]);\n  }\n\n  return currentUser.createRoom({\n    name: `${roomName}`,\n    private: true,\n    addUserIds: [`${id}`],\n    customData: {\n      isDirectMessage: true,\n      userIds: [currentUser.id, id]\n    }\n  });\n}\n\nfunction sendDM(id) {\n  createPrivateRoom.call(this, id).then(room => {\n    connectToRoom.call(this, room.id);\n  });\n}\n\nfunction sendMessage(event) {\n  event.preventDefault();\n  const { newMessage, currentUser, currentRoom } = this.state;\n\n  // Don't want to pollute the chatroom with empty messages.\n  if (newMessage.trim() === '') return;\n\n  currentUser.sendMessage({\n    text: newMessage,\n    roomId: `${currentRoom.id}`\n  });\n\n  // Empty newMessage in state so that input field gets cleared.\n  this.setState({\n    newMessage: ''\n  });\n}\n\nfunction connectToRoom(id = '20648717') {\n  const { currentUser } = this.state;\n\n  this.setState({\n    messages: []\n  });\n\n  return currentUser\n    .subscribeToRoom({\n      roomId: `${id}`,\n      messageLimit: 100,\n      hooks: {\n        // Invoked when there is a new message.\n        onMessage: message => {\n          this.setState({\n            messages: [...this.state.messages, message]\n          });\n        },\n        // Invoked when a user logs in or out.\n        onPresenceChanged: () => {\n          const { currentRoom } = this.state;\n          this.setState({\n            roomUsers: currentRoom.users.sort(a => {\n              if (a.presence.state === 'online') return -1;\n\n              return 1;\n            })\n          });\n        }\n      }\n    })\n    .then(currentRoom => {\n      // Private/direct messages are supported, so checking whether the direct message flag is true\n      // if true the room name is set to the username of the person that's being messaged.\n      const roomName =\n        currentRoom.customData && currentRoom.customData.isDirectMessage\n          ? currentRoom.customData.userIds.filter(\n              id => id !== currentUser.id\n            )[0]\n          : currentRoom.name;\n\n      this.setState({\n        currentRoom,\n        roomUsers: currentRoom.users,\n        rooms: currentUser.rooms,\n        roomName\n      });\n    })\n    .catch(console.error);\n}\n\nfunction connectToChatkit(event) {\n  event.preventDefault();\n\n  const { userId } = this.state;\n\n  // Making sure no empty userId is entered.\n  if (userId === null || userId.trim() === '') {\n    alert('Invalid userId');\n    return;\n  }\n\n  axios\n    .post('/users', { userId })\n    .then(() => {\n      const tokenProvider = new Chatkit.TokenProvider({\n        url: '/authenticate'\n      });\n\n      const chatManager = new Chatkit.ChatManager({\n        instanceLocator: 'v1:us1:15a4e1ad-85e5-4f75-8403-1ca55ac4eebe',\n        userId,\n        tokenProvider\n      });\n\n      return (\n        chatManager\n          .connect({\n            //Invoked when added to a room.\n            onAddedToRoom: room => {\n              const { rooms } = this.state;\n              this.setState({\n                rooms: [...rooms, room]\n              });\n            }\n          })\n          // ChatManager returns the currentUser object for use.\n          .then(currentUser => {\n            this.setState(\n              {\n                currentUser,\n                showLogin: false,\n                rooms: currentUser.rooms\n              },\n              () => connectToRoom.call(this)\n            );\n          })\n      );\n    })\n    .catch(console.error);\n}\n\nexport {\n  handleInput,\n  connectToChatkit,\n  connectToRoom,\n  sendMessage,\n  sendDM,\n  createRoom\n};\n","import React from 'react';\nimport Proptypes from 'prop-types';\n\n// Log in dialog\nconst Dialog = props => {\n  const { userId, handleInput, connectToChatkit } = props;\n\n  return (\n    <div className=\"dialog-container\">\n      <div className=\"dialog\">\n        <form className=\"dialog-form\" onSubmit={connectToChatkit}>\n          <label className=\"username-label\" htmlFor=\"username\">\n            Please enter your username and password: <br />\n            (Please provide just a username for now.)\n          </label>\n          <input\n            id=\"username\"\n            className=\"username-input\"\n            autoFocus\n            type=\"text\"\n            name=\"userId\"\n            value={userId}\n            onChange={handleInput}\n            placeholder=\"Username\"\n          />\n          <input\n            type=\"password\"\n            className=\"password-input\"\n            placeholder=\"Password (Coming soon..)\"\n            disabled\n          />\n          <button type=\"submit\" className=\"submit-btn\">\n            Login\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nDialog.propTypes = {\n  userId: Proptypes.string.isRequired,\n  handleInput: Proptypes.func.isRequired,\n  connectToChatkit: Proptypes.func.isRequired\n};\n\nexport default Dialog;\n","import React from 'react';\nimport Proptypes from 'prop-types';\n\nconst RoomList = props => {\n  const { rooms, currentRoom, connectToRoom, currentUser } = props;\n  const roomList = rooms.map(room => {\n    // Changing room icon depending on whether it's a public room or a private direct message. Images in public/img\n    const roomIcon = !room.isPrivate ? (\n      <img src=\"/img/square-shape-shadow.svg\" alt=\"Public\" class=\"public-img\" />\n    ) : (\n      <img\n        src=\"/img/lock-closed-padlock-silhouette.svg\"\n        alt=\"Private\"\n        class=\"private-img\"\n      />\n    );\n    const isRoomActive = room.id === currentRoom.id ? 'active' : '';\n\n    return (\n      <li\n        className={isRoomActive}\n        key={room.id}\n        onClick={() => connectToRoom(room.id)}\n      >\n        <span className=\"room-icon\">{roomIcon}</span>\n        {room.customData && room.customData.isDirectMessage ? (\n          <span className=\"room-name\">\n            {room.customData.userIds.filter(id => id !== currentUser.id)[0]}\n          </span>\n        ) : (\n          <span className=\"room-name\">{room.name}</span>\n        )}\n      </li>\n    );\n  });\n  return (\n    <div className=\"rooms\">\n      <ul className=\"chat-rooms\">{roomList}</ul>\n    </div>\n  );\n};\n\nRoomList.propTypes = {\n  rooms: Proptypes.array.isRequired,\n  currentRoom: Proptypes.object.isRequired,\n  connectToRoom: Proptypes.func.isRequired,\n  currentUser: Proptypes.object.isRequired\n};\n\nexport default RoomList;\n","import React from 'react';\nimport Proptypes from 'prop-types';\nimport { format } from 'date-fns';\n\nconst ChatSession = props => {\n  const { messages } = props;\n  return messages.map(message => {\n    const time = format(new Date(`${message.updatedAt}`), 'HH:mm');\n\n    return (\n      <li className=\"message\" key={message.id}>\n        <div>\n          <span className=\"user-id\">{message.senderId}</span>\n          <span>{message.text}</span>\n        </div>\n        <span className=\"message-time\">{time}</span>\n      </li>\n    );\n  });\n};\n\nChatSession.propTypes = {\n  messages: Proptypes.arrayOf(Proptypes.object).isRequired\n};\n\nexport default ChatSession;\n","import React from 'react';\nimport Proptypes from 'prop-types';\n\nconst MessageForm = props => {\n  const { newMessage, handleInput, sendMessage } = props;\n\n  return (\n    <form onSubmit={sendMessage} className=\"message-form\">\n      <input\n        value={newMessage}\n        type=\"text\"\n        name=\"newMessage\"\n        className=\"message-input\"\n        placeholder=\"Type something here..\"\n        onChange={handleInput}\n      />\n    </form>\n  );\n};\n\nMessageForm.propTypes = {\n  newMessage: Proptypes.string.isRequired,\n  handleInput: Proptypes.func.isRequired,\n  sendMessage: Proptypes.func.isRequired\n};\n\nexport default MessageForm;\n","import React from 'react';\nimport Proptypes from 'prop-types';\n\nconst RoomUsers = props => {\n  const { roomUsers, currentUser, sendDM } = props;\n\n  const users = roomUsers.map(user => {\n    return (\n      <li className=\"room-member\" key={user.id}>\n        <div>\n          {/* Showing whether a user is online or offline*/}\n          <span className={`presence ${user.presence.state}`} />\n          <span>{user.name}</span>\n        </div>\n        {/* Direct message: Making sure the option only shows up for users that aren't the current user */}\n        {currentUser.id !== user.id ? (\n          <button\n            onClick={() => sendDM(user.id)}\n            title={`Sent ${user.name} a direct message`}\n            className=\"send-dm\"\n          >\n            +\n          </button>\n        ) : null}\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"room-users\">\n      <span className=\"room-users\">Users in this room:</span>\n      <ul>{users}</ul>\n    </div>\n  );\n};\n\nRoomUsers.propTypes = {\n  roomUsers: Proptypes.array.isRequired,\n  sendDM: Proptypes.func.isRequired,\n  currentUser: Proptypes.object.isRequired\n};\n\nexport default RoomUsers;\n","import React from 'react';\nimport Proptypes from 'prop-types';\n\nconst CreateRoom = props => {\n  const { newRoom, createRoom, handleInput } = props;\n\n  return (\n    <div className=\"create-room\">\n      <form className=\"create-room-form\" onSubmit={createRoom}>\n        <input\n          name=\"newRoom\"\n          type=\"text\"\n          value={newRoom}\n          onChange={handleInput}\n          placeholder=\"Create new room\"\n          className=\"create-room-input\"\n        />\n        <button type=\"submit\" className=\"create-room-btn\">\n          +\n        </button>\n      </form>\n    </div>\n  );\n};\n\nCreateRoom.propTypes = {\n  newRoom: Proptypes.string.isRequired,\n  createRoom: Proptypes.func.isRequired\n};\n\nexport default CreateRoom;\n","import React, { Component } from 'react';\nimport {\n  handleInput,\n  connectToChatkit,\n  connectToRoom,\n  sendMessage,\n  sendDM,\n  createRoom\n} from './methods';\nimport Dialog from './components/Dialog';\nimport RoomList from './components/RoomList';\nimport ChatSession from './components/ChatSession';\nimport MessageForm from './components/MessageForm';\nimport RoomUsers from './components/RoomUsers';\nimport CreateRoom from './components/CreateRoom';\n\nimport 'skeleton-css/css/normalize.css';\nimport 'skeleton-css/css/skeleton.css';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      userId: '',\n      showLogin: true,\n      isLoading: false,\n      currentUser: null,\n      currentRoom: null,\n      rooms: [],\n      roomUsers: [],\n      newRoom: '',\n      roomName: null,\n      messages: [],\n      newMessage: ''\n    };\n    this.handleInput = handleInput.bind(this);\n    this.connectToChatkit = connectToChatkit.bind(this);\n    this.connectToRoom = connectToRoom.bind(this);\n    this.sendMessage = sendMessage.bind(this);\n    this.sendDM = sendDM.bind(this);\n    this.createRoom = createRoom.bind(this);\n  }\n\n  render() {\n    const {\n      userId,\n      showLogin,\n      rooms,\n      currentUser,\n      currentRoom,\n      roomUsers,\n      newRoom,\n      roomName,\n      messages,\n      newMessage\n    } = this.state;\n    return (\n      <div className=\"App\">\n        <aside className=\"sidebar left-sidebar\">\n          {/*Checking if currentUser exists and if so rendering..*/}\n          {currentUser ? (\n            <div className=\"user-profile\">\n              <div className=\"avatar\">\n                <img src=\"/img/user.svg\" alt=\"No avatar\" />\n              </div>\n              <div className=\"username\">{currentUser.name}</div>\n              <div className=\"user-id\">{`@${currentUser.id}`}</div>\n            </div>\n          ) : null}\n          {/*Checking whether current room exists and if so lising all users in the current room */}\n          {currentRoom ? (\n            <RoomUsers\n              currentUser={currentUser}\n              roomUsers={roomUsers}\n              sendDM={this.sendDM}\n            />\n          ) : null}\n          {/*Checking whether user is logged in and if not show dialog to login..*/}\n          {showLogin ? (\n            <Dialog\n              userId={userId}\n              handleInput={this.handleInput}\n              connectToChatkit={this.connectToChatkit}\n            />\n          ) : null}\n        </aside>\n        <section className=\"chat-screen\">\n          <header className=\"chat-header\">\n            {/*Checking if currentRoom exists and if so displaying room name in header, also listing amount of users in each room. */}\n            {currentRoom ? (\n              <h3>\n                {roomName}{' '}\n                <span style={{ color: '#0dabae' }}>\n                  ({currentRoom.users.length} users)\n                </span>\n              </h3>\n            ) : null}\n          </header>\n          <ul className=\"chat-messages\">\n            <ChatSession messages={messages} />\n          </ul>\n          <footer className=\"chat-footer\">\n            <MessageForm\n              newMessage={newMessage}\n              handleInput={this.handleInput}\n              sendMessage={this.sendMessage}\n            />\n          </footer>\n        </section>\n        <aside className=\"sidebar right-sidebar\">\n          <h1>\n            <span style={{ color: '#98a0a9' }}>lets</span>chat.\n          </h1>\n          {/*Checking whether current user exists and if so showing create room form */}\n          <div className=\"right-sidebar-header\">\n            {currentUser ? (\n              <CreateRoom\n                newRoom={newRoom}\n                createRoom={this.createRoom}\n                handleInput={this.handleInput}\n              />\n            ) : null}\n          </div>\n          {/*Checking if currentRoom exists and if so rendering list of rooms*/}\n          {currentRoom ? (\n            <RoomList\n              rooms={rooms}\n              currentRoom={currentRoom}\n              connectToRoom={this.connectToRoom}\n              currentUser={currentUser}\n            />\n          ) : null}\n        </aside>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}